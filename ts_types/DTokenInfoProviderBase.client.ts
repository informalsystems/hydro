/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Addr, ConfigResponse, Config, Decimal, DenomInfoResponse } from "./DTokenInfoProviderBase.types";
export interface DTokenInfoProviderBaseReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  denomInfo: ({
    roundId
  }: {
    roundId: number;
  }) => Promise<DenomInfoResponse>;
}
export class DTokenInfoProviderBaseQueryClient implements DTokenInfoProviderBaseReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.denomInfo = this.denomInfo.bind(this);
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  denomInfo = async ({
    roundId
  }: {
    roundId: number;
  }): Promise<DenomInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      denom_info: {
        round_id: roundId
      }
    });
  };
}
export interface DTokenInfoProviderBaseInterface extends DTokenInfoProviderBaseReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateTokenRatio: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class DTokenInfoProviderBaseClient extends DTokenInfoProviderBaseQueryClient implements DTokenInfoProviderBaseInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateTokenRatio = this.updateTokenRatio.bind(this);
  }
  updateTokenRatio = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_token_ratio: {}
    }, fee, memo, _funds);
  };
}