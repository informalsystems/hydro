/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, DenomMetadata, ExecuteMsg, UpdateConfigData, QueryMsg, Order, ConfigResponse, Config, FundedWithdrawalRequestsResponse, Timestamp, Uint64, Addr, UserPayoutsHistoryResponse, PayoutEntry, UserWithdrawalRequestsResponse, WithdrawalEntry, WithdrawalQueueInfoResponse, WithdrawalQueueInfo } from "./InflowBase.types";
export interface InflowBaseReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  totalSharesIssued: () => Promise<Uint128>;
  totalPoolValue: () => Promise<Uint128>;
  sharesEquivalentValue: ({
    shares
  }: {
    shares: Uint128;
  }) => Promise<Uint128>;
  userSharesEquivalentValue: ({
    address
  }: {
    address: string;
  }) => Promise<Uint128>;
  deployedAmount: () => Promise<Uint128>;
  availableForDeployment: () => Promise<Uint128>;
  withdrawalQueueInfo: () => Promise<WithdrawalQueueInfoResponse>;
  amountToFundPendingWithdrawals: () => Promise<Uint128>;
  fundedWithdrawalRequests: ({
    limit
  }: {
    limit: number;
  }) => Promise<FundedWithdrawalRequestsResponse>;
  userWithdrawalRequests: ({
    address,
    limit,
    startFrom
  }: {
    address: string;
    limit: number;
    startFrom: number;
  }) => Promise<UserWithdrawalRequestsResponse>;
  userPayoutsHistory: ({
    address,
    limit,
    order,
    startFrom
  }: {
    address: string;
    limit: number;
    order: Order;
    startFrom: number;
  }) => Promise<UserPayoutsHistoryResponse>;
}
export class InflowBaseQueryClient implements InflowBaseReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.totalSharesIssued = this.totalSharesIssued.bind(this);
    this.totalPoolValue = this.totalPoolValue.bind(this);
    this.sharesEquivalentValue = this.sharesEquivalentValue.bind(this);
    this.userSharesEquivalentValue = this.userSharesEquivalentValue.bind(this);
    this.deployedAmount = this.deployedAmount.bind(this);
    this.availableForDeployment = this.availableForDeployment.bind(this);
    this.withdrawalQueueInfo = this.withdrawalQueueInfo.bind(this);
    this.amountToFundPendingWithdrawals = this.amountToFundPendingWithdrawals.bind(this);
    this.fundedWithdrawalRequests = this.fundedWithdrawalRequests.bind(this);
    this.userWithdrawalRequests = this.userWithdrawalRequests.bind(this);
    this.userPayoutsHistory = this.userPayoutsHistory.bind(this);
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  totalSharesIssued = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_shares_issued: {}
    });
  };
  totalPoolValue = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_pool_value: {}
    });
  };
  sharesEquivalentValue = async ({
    shares
  }: {
    shares: Uint128;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      shares_equivalent_value: {
        shares
      }
    });
  };
  userSharesEquivalentValue = async ({
    address
  }: {
    address: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_shares_equivalent_value: {
        address
      }
    });
  };
  deployedAmount = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      deployed_amount: {}
    });
  };
  availableForDeployment = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      available_for_deployment: {}
    });
  };
  withdrawalQueueInfo = async (): Promise<WithdrawalQueueInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      withdrawal_queue_info: {}
    });
  };
  amountToFundPendingWithdrawals = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      amount_to_fund_pending_withdrawals: {}
    });
  };
  fundedWithdrawalRequests = async ({
    limit
  }: {
    limit: number;
  }): Promise<FundedWithdrawalRequestsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      funded_withdrawal_requests: {
        limit
      }
    });
  };
  userWithdrawalRequests = async ({
    address,
    limit,
    startFrom
  }: {
    address: string;
    limit: number;
    startFrom: number;
  }): Promise<UserWithdrawalRequestsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_withdrawal_requests: {
        address,
        limit,
        start_from: startFrom
      }
    });
  };
  userPayoutsHistory = async ({
    address,
    limit,
    order,
    startFrom
  }: {
    address: string;
    limit: number;
    order: Order;
    startFrom: number;
  }): Promise<UserPayoutsHistoryResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_payouts_history: {
        address,
        limit,
        order,
        start_from: startFrom
      }
    });
  };
}
export interface InflowBaseInterface extends InflowBaseReadOnlyInterface {
  contractAddress: string;
  sender: string;
  deposit: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  withdraw: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  cancelWithdrawal: ({
    withdrawalIds
  }: {
    withdrawalIds: number[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  fulfillPendingWithdrawals: ({
    limit
  }: {
    limit: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  claimUnbondedWithdrawals: ({
    withdrawalIds
  }: {
    withdrawalIds: number[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  submitDeployedAmount: ({
    amount
  }: {
    amount: Uint128;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  withdrawForDeployment: ({
    amount
  }: {
    amount: Uint128;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  addToWhitelist: ({
    address
  }: {
    address: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  removeFromWhitelist: ({
    address
  }: {
    address: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    config
  }: {
    config: UpdateConfigData;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class InflowBaseClient extends InflowBaseQueryClient implements InflowBaseInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.deposit = this.deposit.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.cancelWithdrawal = this.cancelWithdrawal.bind(this);
    this.fulfillPendingWithdrawals = this.fulfillPendingWithdrawals.bind(this);
    this.claimUnbondedWithdrawals = this.claimUnbondedWithdrawals.bind(this);
    this.submitDeployedAmount = this.submitDeployedAmount.bind(this);
    this.withdrawForDeployment = this.withdrawForDeployment.bind(this);
    this.addToWhitelist = this.addToWhitelist.bind(this);
    this.removeFromWhitelist = this.removeFromWhitelist.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }
  deposit = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit: {}
    }, fee_, memo_, funds_);
  };
  withdraw = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {}
    }, fee_, memo_, funds_);
  };
  cancelWithdrawal = async ({
    withdrawalIds
  }: {
    withdrawalIds: number[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_withdrawal: {
        withdrawal_ids: withdrawalIds
      }
    }, fee_, memo_, funds_);
  };
  fulfillPendingWithdrawals = async ({
    limit
  }: {
    limit: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      fulfill_pending_withdrawals: {
        limit
      }
    }, fee_, memo_, funds_);
  };
  claimUnbondedWithdrawals = async ({
    withdrawalIds
  }: {
    withdrawalIds: number[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_unbonded_withdrawals: {
        withdrawal_ids: withdrawalIds
      }
    }, fee_, memo_, funds_);
  };
  submitDeployedAmount = async ({
    amount
  }: {
    amount: Uint128;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      submit_deployed_amount: {
        amount
      }
    }, fee_, memo_, funds_);
  };
  withdrawForDeployment = async ({
    amount
  }: {
    amount: Uint128;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_for_deployment: {
        amount
      }
    }, fee_, memo_, funds_);
  };
  addToWhitelist = async ({
    address
  }: {
    address: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_to_whitelist: {
        address
      }
    }, fee_, memo_, funds_);
  };
  removeFromWhitelist = async ({
    address
  }: {
    address: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_from_whitelist: {
        address
      }
    }, fee_, memo_, funds_);
  };
  updateConfig = async ({
    config
  }: {
    config: UpdateConfigData;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        config
      }
    }, fee_, memo_, funds_);
  };
}