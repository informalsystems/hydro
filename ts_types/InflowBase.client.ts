/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, DenomMetadata, ExecuteMsg, Uint128, QueryMsg, ConfigResponse, Config } from "./InflowBase.types";
export interface InflowBaseReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  totalSharesIssued: () => Promise<Uint128>;
  totalPoolValue: () => Promise<Uint128>;
  shareEquivalentValue: ({
    address
  }: {
    address: string;
  }) => Promise<Uint128>;
  deployedAmount: () => Promise<Uint128>;
}
export class InflowBaseQueryClient implements InflowBaseReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.totalSharesIssued = this.totalSharesIssued.bind(this);
    this.totalPoolValue = this.totalPoolValue.bind(this);
    this.shareEquivalentValue = this.shareEquivalentValue.bind(this);
    this.deployedAmount = this.deployedAmount.bind(this);
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  totalSharesIssued = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_shares_issued: {}
    });
  };
  totalPoolValue = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_pool_value: {}
    });
  };
  shareEquivalentValue = async ({
    address
  }: {
    address: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      share_equivalent_value: {
        address
      }
    });
  };
  deployedAmount = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      deployed_amount: {}
    });
  };
}
export interface InflowBaseInterface extends InflowBaseReadOnlyInterface {
  contractAddress: string;
  sender: string;
  deposit: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  submitDeployedAmount: ({
    amount
  }: {
    amount: Uint128;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  withdrawForDeployment: ({
    amount
  }: {
    amount: Uint128;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  addToWhitelist: ({
    address
  }: {
    address: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  removeFromWhitelist: ({
    address
  }: {
    address: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class InflowBaseClient extends InflowBaseQueryClient implements InflowBaseInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.deposit = this.deposit.bind(this);
    this.submitDeployedAmount = this.submitDeployedAmount.bind(this);
    this.withdrawForDeployment = this.withdrawForDeployment.bind(this);
    this.addToWhitelist = this.addToWhitelist.bind(this);
    this.removeFromWhitelist = this.removeFromWhitelist.bind(this);
  }
  deposit = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit: {}
    }, fee_, memo_, funds_);
  };
  submitDeployedAmount = async ({
    amount
  }: {
    amount: Uint128;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      submit_deployed_amount: {
        amount
      }
    }, fee_, memo_, funds_);
  };
  withdrawForDeployment = async ({
    amount
  }: {
    amount: Uint128;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_for_deployment: {
        amount
      }
    }, fee_, memo_, funds_);
  };
  addToWhitelist = async ({
    address
  }: {
    address: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_to_whitelist: {
        address
      }
    }, fee_, memo_, funds_);
  };
  removeFromWhitelist = async ({
    address
  }: {
    address: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_from_whitelist: {
        address
      }
    }, fee_, memo_, funds_);
  };
}