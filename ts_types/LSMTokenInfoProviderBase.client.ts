/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, Addr, AdminsResponse, ConfigResponse, Config, ICQManagersResponse, RegisteredValidatorQueriesResponse, ValidatorsInfoResponse } from "./LSMTokenInfoProviderBase.types";
export interface LSMTokenInfoProviderBaseReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  registeredValidatorQueries: () => Promise<RegisteredValidatorQueriesResponse>;
  admins: () => Promise<AdminsResponse>;
  icqManagers: () => Promise<IcqManagersResponse>;
  validatorsInfo: ({
    roundId
  }: {
    roundId: number;
  }) => Promise<ValidatorsInfoResponse>;
}
export class LSMTokenInfoProviderBaseQueryClient implements LSMTokenInfoProviderBaseReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.registeredValidatorQueries = this.registeredValidatorQueries.bind(this);
    this.admins = this.admins.bind(this);
    this.icqManagers = this.icqManagers.bind(this);
    this.validatorsInfo = this.validatorsInfo.bind(this);
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  registeredValidatorQueries = async (): Promise<RegisteredValidatorQueriesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      registered_validator_queries: {}
    });
  };
  admins = async (): Promise<AdminsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admins: {}
    });
  };
  icqManagers = async (): Promise<IcqManagersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      icq_managers: {}
    });
  };
  validatorsInfo = async ({
    roundId
  }: {
    roundId: number;
  }): Promise<ValidatorsInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      validators_info: {
        round_id: roundId
      }
    });
  };
}
export interface LSMTokenInfoProviderBaseInterface extends LSMTokenInfoProviderBaseReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createIcqsForValidators: ({
    validators
  }: {
    validators: string[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  addICQManager: ({
    address
  }: {
    address: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  removeICQManager: ({
    address
  }: {
    address: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  withdrawICQFunds: ({
    amount
  }: {
    amount: Uint128;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class LSMTokenInfoProviderBaseClient extends LSMTokenInfoProviderBaseQueryClient implements LSMTokenInfoProviderBaseInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createIcqsForValidators = this.createIcqsForValidators.bind(this);
    this.addICQManager = this.addICQManager.bind(this);
    this.removeICQManager = this.removeICQManager.bind(this);
    this.withdrawICQFunds = this.withdrawICQFunds.bind(this);
  }
  createIcqsForValidators = async ({
    validators
  }: {
    validators: string[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_icqs_for_validators: {
        validators
      }
    }, fee_, memo_, funds_);
  };
  addICQManager = async ({
    address
  }: {
    address: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_i_c_q_manager: {
        address
      }
    }, fee_, memo_, funds_);
  };
  removeICQManager = async ({
    address
  }: {
    address: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_i_c_q_manager: {
        address
      }
    }, fee_, memo_, funds_);
  };
  withdrawICQFunds = async ({
    amount
  }: {
    amount: Uint128;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_i_c_q_funds: {
        amount
      }
    }, fee_, memo_, funds_);
  };
}