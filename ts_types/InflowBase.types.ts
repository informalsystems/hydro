/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export interface InstantiateMsg {
  deposit_cap: Uint128;
  deposit_denom: string;
  max_withdrawals_per_user: number;
  subdenom: string;
  token_metadata: DenomMetadata;
  whitelist: string[];
}
export interface DenomMetadata {
  description: string;
  display: string;
  exponent: number;
  name: string;
  symbol: string;
  uri?: string | null;
  uri_hash?: string | null;
}
export type ExecuteMsg = {
  deposit: {};
} | {
  withdraw: {};
} | {
  cancel_withdrawal: {
    withdrawal_ids: number[];
  };
} | {
  fulfill_pending_withdrawals: {
    limit: number;
  };
} | {
  claim_unbonded_withdrawals: {
    withdrawal_ids: number[];
  };
} | {
  submit_deployed_amount: {
    amount: Uint128;
  };
} | {
  withdraw_for_deployment: {
    amount: Uint128;
  };
} | {
  add_to_whitelist: {
    address: string;
  };
} | {
  remove_from_whitelist: {
    address: string;
  };
} | {
  update_config: {
    config: UpdateConfigData;
  };
};
export interface UpdateConfigData {
  deposit_cap?: Uint128 | null;
  max_withdrawals_per_user?: number | null;
}
export type QueryMsg = {
  config: {};
} | {
  total_shares_issued: {};
} | {
  total_pool_value: {};
} | {
  shares_equivalent_value: {
    shares: Uint128;
  };
} | {
  user_shares_equivalent_value: {
    address: string;
  };
} | {
  deployed_amount: {};
} | {
  available_for_deployment: {};
} | {
  withdrawal_queue_info: {};
} | {
  amount_to_fund_pending_withdrawals: {};
} | {
  funded_withdrawal_requests: {
    limit: number;
  };
} | {
  user_withdrawal_requests: {
    address: string;
    limit: number;
    start_from: number;
  };
} | {
  user_payouts_history: {
    address: string;
    limit: number;
    order: Order;
    start_from: number;
  };
};
export type Order = "ascending" | "descending";
export interface ConfigResponse {
  config: Config;
}
export interface Config {
  deposit_cap: Uint128;
  deposit_denom: string;
  max_withdrawals_per_user: number;
  vault_shares_denom: string;
}
export interface FundedWithdrawalRequestsResponse {
  withdrawal_ids: number[];
}
export type Timestamp = Uint64;
export type Uint64 = string;
export type Addr = string;
export interface UserPayoutsHistoryResponse {
  payouts: PayoutEntry[];
}
export interface PayoutEntry {
  amount_received: Uint128;
  executed_at: Timestamp;
  id: number;
  recipient: Addr;
  vault_shares_burned: Uint128;
}
export interface UserWithdrawalRequestsResponse {
  withdrawals: WithdrawalEntry[];
}
export interface WithdrawalEntry {
  amount_to_receive: Uint128;
  id: number;
  initiated_at: Timestamp;
  is_funded: boolean;
  shares_burned: Uint128;
  withdrawer: Addr;
}
export interface WithdrawalQueueInfoResponse {
  info: WithdrawalQueueInfo;
}
export interface WithdrawalQueueInfo {
  non_funded_withdrawal_amount: Uint128;
  total_shares_burned: Uint128;
  total_withdrawal_amount: Uint128;
}