/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Timestamp, Uint64, Uint128, Binary, ExecuteLockTokensMsg, SignatureInfo, QueryMsg, Addr, AdminsResponse, ConfigResponse, Config, CurrentEpochUserLockedResponse, CurrentStageResponse, StageData } from "./GatekeeperBase.types";
export interface GatekeeperBaseReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  currentStage: () => Promise<CurrentStageResponse>;
  admins: () => Promise<AdminsResponse>;
  currentEpochUserLocked: ({
    userAddress
  }: {
    userAddress: string;
  }) => Promise<CurrentEpochUserLockedResponse>;
}
export class GatekeeperBaseQueryClient implements GatekeeperBaseReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.currentStage = this.currentStage.bind(this);
    this.admins = this.admins.bind(this);
    this.currentEpochUserLocked = this.currentEpochUserLocked.bind(this);
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  currentStage = async (): Promise<CurrentStageResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      current_stage: {}
    });
  };
  admins = async (): Promise<AdminsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admins: {}
    });
  };
  currentEpochUserLocked = async ({
    userAddress
  }: {
    userAddress: string;
  }): Promise<CurrentEpochUserLockedResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      current_epoch_user_locked: {
        user_address: userAddress
      }
    });
  };
}
export interface GatekeeperBaseInterface extends GatekeeperBaseReadOnlyInterface {
  contractAddress: string;
  sender: string;
  registerStage: ({
    activateAt,
    hrp,
    merkleRoot,
    startNewEpoch
  }: {
    activateAt: Timestamp;
    hrp?: string;
    merkleRoot: string;
    startNewEpoch: boolean;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  lockTokens: ({
    amountToLock,
    maximumAmount,
    proof,
    sigInfo,
    userAddress
  }: {
    amountToLock: Uint128;
    maximumAmount: Uint128;
    proof: string[];
    sigInfo?: SignatureInfo;
    userAddress: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  addAdmin: ({
    admin
  }: {
    admin: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  removeAdmin: ({
    admin
  }: {
    admin: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class GatekeeperBaseClient extends GatekeeperBaseQueryClient implements GatekeeperBaseInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.registerStage = this.registerStage.bind(this);
    this.lockTokens = this.lockTokens.bind(this);
    this.addAdmin = this.addAdmin.bind(this);
    this.removeAdmin = this.removeAdmin.bind(this);
  }
  registerStage = async ({
    activateAt,
    hrp,
    merkleRoot,
    startNewEpoch
  }: {
    activateAt: Timestamp;
    hrp?: string;
    merkleRoot: string;
    startNewEpoch: boolean;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_stage: {
        activate_at: activateAt,
        hrp,
        merkle_root: merkleRoot,
        start_new_epoch: startNewEpoch
      }
    }, fee_, memo_, funds_);
  };
  lockTokens = async ({
    amountToLock,
    maximumAmount,
    proof,
    sigInfo,
    userAddress
  }: {
    amountToLock: Uint128;
    maximumAmount: Uint128;
    proof: string[];
    sigInfo?: SignatureInfo;
    userAddress: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      lock_tokens: {
        amount_to_lock: amountToLock,
        maximum_amount: maximumAmount,
        proof,
        sig_info: sigInfo,
        user_address: userAddress
      }
    }, fee_, memo_, funds_);
  };
  addAdmin = async ({
    admin
  }: {
    admin: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_admin: {
        admin
      }
    }, fee_, memo_, funds_);
  };
  removeAdmin = async ({
    admin
  }: {
    admin: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_admin: {
        admin
      }
    }, fee_, memo_, funds_);
  };
}