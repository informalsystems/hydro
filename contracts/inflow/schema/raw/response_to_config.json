{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ConfigResponse",
  "type": "object",
  "required": [
    "config"
  ],
  "properties": {
    "config": {
      "$ref": "#/definitions/Config"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Config": {
      "type": "object",
      "required": [
        "deposit_cap",
        "deposit_denom",
        "max_withdrawals_per_user",
        "vault_shares_denom"
      ],
      "properties": {
        "deposit_cap": {
          "description": "Maximum number of tokens that can be deposited into the vault.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "deposit_denom": {
          "description": "Token denom that users can deposit into the vault.",
          "type": "string"
        },
        "max_withdrawals_per_user": {
          "description": "Maximum number of pending withdrawal requests allowed per user.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "vault_shares_denom": {
          "description": "Denom of the vault shares token that is issued to users when they deposit tokens into the vault.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
