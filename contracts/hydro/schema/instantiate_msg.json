{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "first_round_start",
    "hub_connection_id",
    "hub_transfer_channel_id",
    "icq_managers",
    "icq_update_period",
    "initial_whitelist",
    "is_in_pilot_mode",
    "lock_epoch_length",
    "max_locked_tokens",
    "max_validator_shares_participating",
    "round_length",
    "tranches",
    "whitelist_admins"
  ],
  "properties": {
    "first_round_start": {
      "$ref": "#/definitions/Timestamp"
    },
    "hub_connection_id": {
      "type": "string"
    },
    "hub_transfer_channel_id": {
      "type": "string"
    },
    "icq_managers": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "icq_update_period": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "initial_whitelist": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "is_in_pilot_mode": {
      "type": "boolean"
    },
    "lock_epoch_length": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "max_locked_tokens": {
      "$ref": "#/definitions/Uint128"
    },
    "max_validator_shares_participating": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "round_length": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "tranches": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TrancheInfo"
      }
    },
    "whitelist_admins": {
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "TrancheInfo": {
      "type": "object",
      "required": [
        "metadata",
        "name"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
