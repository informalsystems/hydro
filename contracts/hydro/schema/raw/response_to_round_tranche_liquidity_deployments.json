{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "RoundTrancheLiquidityDeploymentsResponse",
  "type": "object",
  "required": [
    "liquidity_deployments"
  ],
  "properties": {
    "liquidity_deployments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/LiquidityDeployment"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "LiquidityDeployment": {
      "type": "object",
      "required": [
        "deployed_funds",
        "destinations",
        "funds_before_deployment",
        "proposal_id",
        "remaining_rounds",
        "round_id",
        "total_rounds",
        "tranche_id"
      ],
      "properties": {
        "deployed_funds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "destinations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "funds_before_deployment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "proposal_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "remaining_rounds": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "round_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "total_rounds": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "tranche_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
