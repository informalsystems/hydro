{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "lock_tokens"
      ],
      "properties": {
        "lock_tokens": {
          "type": "object",
          "required": [
            "lock_duration"
          ],
          "properties": {
            "lock_duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "refresh_lock_duration"
      ],
      "properties": {
        "refresh_lock_duration": {
          "type": "object",
          "required": [
            "lock_duration",
            "lock_ids"
          ],
          "properties": {
            "lock_duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lock_ids": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "unlock_tokens"
      ],
      "properties": {
        "unlock_tokens": {
          "type": "object",
          "properties": {
            "lock_ids": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_proposal"
      ],
      "properties": {
        "create_proposal": {
          "type": "object",
          "required": [
            "deployment_duration",
            "description",
            "minimum_atom_liquidity_request",
            "title",
            "tranche_id"
          ],
          "properties": {
            "deployment_duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "description": {
              "type": "string"
            },
            "minimum_atom_liquidity_request": {
              "$ref": "#/definitions/Uint128"
            },
            "round_id": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "title": {
              "type": "string"
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "vote"
      ],
      "properties": {
        "vote": {
          "type": "object",
          "required": [
            "proposals_votes",
            "tranche_id"
          ],
          "properties": {
            "proposals_votes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProposalToLockups"
              }
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "unvote"
      ],
      "properties": {
        "unvote": {
          "type": "object",
          "required": [
            "lock_ids",
            "tranche_id"
          ],
          "properties": {
            "lock_ids": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_account_to_whitelist"
      ],
      "properties": {
        "add_account_to_whitelist": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_account_from_whitelist"
      ],
      "properties": {
        "remove_account_from_whitelist": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "activate_at"
          ],
          "properties": {
            "activate_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "known_users_cap": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint128",
              "minimum": 0.0
            },
            "max_deployment_duration": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "max_locked_tokens": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint128",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "delete_configs"
      ],
      "properties": {
        "delete_configs": {
          "type": "object",
          "required": [
            "timestamps"
          ],
          "properties": {
            "timestamps": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Timestamp"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "pause"
      ],
      "properties": {
        "pause": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_tranche"
      ],
      "properties": {
        "add_tranche": {
          "type": "object",
          "required": [
            "tranche"
          ],
          "properties": {
            "tranche": {
              "$ref": "#/definitions/TrancheInfo"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "edit_tranche"
      ],
      "properties": {
        "edit_tranche": {
          "type": "object",
          "required": [
            "tranche_id"
          ],
          "properties": {
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "tranche_metadata": {
              "type": [
                "string",
                "null"
              ]
            },
            "tranche_name": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_icqs_for_validators"
      ],
      "properties": {
        "create_icqs_for_validators": {
          "type": "object",
          "required": [
            "validators"
          ],
          "properties": {
            "validators": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_i_c_q_manager"
      ],
      "properties": {
        "add_i_c_q_manager": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_i_c_q_manager"
      ],
      "properties": {
        "remove_i_c_q_manager": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw_i_c_q_funds"
      ],
      "properties": {
        "withdraw_i_c_q_funds": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_liquidity_deployment"
      ],
      "properties": {
        "add_liquidity_deployment": {
          "type": "object",
          "required": [
            "deployed_funds",
            "destinations",
            "funds_before_deployment",
            "proposal_id",
            "remaining_rounds",
            "round_id",
            "total_rounds",
            "tranche_id"
          ],
          "properties": {
            "deployed_funds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "destinations": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "funds_before_deployment": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "remaining_rounds": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "total_rounds": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_liquidity_deployment"
      ],
      "properties": {
        "remove_liquidity_deployment": {
          "type": "object",
          "required": [
            "proposal_id",
            "round_id",
            "tranche_id"
          ],
          "properties": {
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_token_group_ratio"
      ],
      "properties": {
        "update_token_group_ratio": {
          "type": "object",
          "required": [
            "new_ratio",
            "old_ratio",
            "token_group_id"
          ],
          "properties": {
            "new_ratio": {
              "$ref": "#/definitions/Decimal"
            },
            "old_ratio": {
              "$ref": "#/definitions/Decimal"
            },
            "token_group_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_token_info_provider"
      ],
      "properties": {
        "add_token_info_provider": {
          "type": "object",
          "required": [
            "token_info_provider"
          ],
          "properties": {
            "token_info_provider": {
              "$ref": "#/definitions/TokenInfoProviderInstantiateMsg"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_token_info_provider"
      ],
      "properties": {
        "remove_token_info_provider": {
          "type": "object",
          "required": [
            "provider_id"
          ],
          "properties": {
            "provider_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "ProposalToLockups": {
      "type": "object",
      "required": [
        "lock_ids",
        "proposal_id"
      ],
      "properties": {
        "lock_ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "proposal_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "TokenInfoProviderInstantiateMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "lsm"
          ],
          "properties": {
            "lsm": {
              "type": "object",
              "required": [
                "hub_connection_id",
                "hub_transfer_channel_id",
                "icq_update_period",
                "max_validator_shares_participating"
              ],
              "properties": {
                "hub_connection_id": {
                  "type": "string"
                },
                "hub_transfer_channel_id": {
                  "type": "string"
                },
                "icq_update_period": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "max_validator_shares_participating": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "token_info_provider_contract"
          ],
          "properties": {
            "token_info_provider_contract": {
              "type": "object",
              "required": [
                "code_id",
                "label",
                "msg"
              ],
              "properties": {
                "admin": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "label": {
                  "type": "string"
                },
                "msg": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TrancheInfo": {
      "type": "object",
      "required": [
        "metadata",
        "name"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
