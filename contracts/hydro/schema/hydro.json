{
  "contract_name": "hydro",
  "contract_version": "3.4.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "first_round_start",
      "icq_managers",
      "initial_whitelist",
      "lock_epoch_length",
      "max_deployment_duration",
      "max_locked_tokens",
      "round_length",
      "round_lock_power_schedule",
      "token_info_providers",
      "tranches",
      "whitelist_admins"
    ],
    "properties": {
      "cw721_collection_info": {
        "anyOf": [
          {
            "$ref": "#/definitions/CollectionInfo"
          },
          {
            "type": "null"
          }
        ]
      },
      "first_round_start": {
        "$ref": "#/definitions/Timestamp"
      },
      "gatekeeper": {
        "anyOf": [
          {
            "$ref": "#/definitions/InstantiateContractMsg"
          },
          {
            "type": "null"
          }
        ]
      },
      "icq_managers": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "initial_whitelist": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "lock_epoch_length": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "max_deployment_duration": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "max_locked_tokens": {
        "$ref": "#/definitions/Uint128"
      },
      "round_length": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "round_lock_power_schedule": {
        "type": "array",
        "items": {
          "type": "array",
          "items": [
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            {
              "$ref": "#/definitions/Decimal"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        }
      },
      "token_info_providers": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/TokenInfoProviderInstantiateMsg"
        }
      },
      "tranches": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/TrancheInfo"
        }
      },
      "whitelist_admins": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "CollectionInfo": {
        "type": "object",
        "required": [
          "name",
          "symbol"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "InstantiateContractMsg": {
        "type": "object",
        "required": [
          "code_id",
          "label",
          "msg"
        ],
        "properties": {
          "admin": {
            "type": [
              "string",
              "null"
            ]
          },
          "code_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "label": {
            "type": "string"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "TokenInfoProviderInstantiateMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "lsm"
            ],
            "properties": {
              "lsm": {
                "type": "object",
                "required": [
                  "hub_connection_id",
                  "hub_transfer_channel_id",
                  "icq_update_period",
                  "max_validator_shares_participating"
                ],
                "properties": {
                  "hub_connection_id": {
                    "type": "string"
                  },
                  "hub_transfer_channel_id": {
                    "type": "string"
                  },
                  "icq_update_period": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "max_validator_shares_participating": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "token_info_provider_contract"
            ],
            "properties": {
              "token_info_provider_contract": {
                "type": "object",
                "required": [
                  "code_id",
                  "label",
                  "msg"
                ],
                "properties": {
                  "admin": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "label": {
                    "type": "string"
                  },
                  "msg": {
                    "$ref": "#/definitions/Binary"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TrancheInfo": {
        "type": "object",
        "required": [
          "metadata",
          "name"
        ],
        "properties": {
          "metadata": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "lock_tokens"
        ],
        "properties": {
          "lock_tokens": {
            "type": "object",
            "required": [
              "lock_duration"
            ],
            "properties": {
              "lock_duration": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "proof": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/LockTokensProof"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "refresh_lock_duration"
        ],
        "properties": {
          "refresh_lock_duration": {
            "type": "object",
            "required": [
              "lock_duration",
              "lock_ids"
            ],
            "properties": {
              "lock_duration": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "lock_ids": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unlock_tokens"
        ],
        "properties": {
          "unlock_tokens": {
            "type": "object",
            "properties": {
              "lock_ids": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_proposal"
        ],
        "properties": {
          "create_proposal": {
            "type": "object",
            "required": [
              "deployment_duration",
              "description",
              "minimum_atom_liquidity_request",
              "title",
              "tranche_id"
            ],
            "properties": {
              "deployment_duration": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "description": {
                "type": "string"
              },
              "minimum_atom_liquidity_request": {
                "$ref": "#/definitions/Uint128"
              },
              "round_id": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "title": {
                "type": "string"
              },
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "vote"
        ],
        "properties": {
          "vote": {
            "type": "object",
            "required": [
              "proposals_votes",
              "tranche_id"
            ],
            "properties": {
              "proposals_votes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ProposalToLockups"
                }
              },
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unvote"
        ],
        "properties": {
          "unvote": {
            "type": "object",
            "required": [
              "lock_ids",
              "tranche_id"
            ],
            "properties": {
              "lock_ids": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_account_to_whitelist"
        ],
        "properties": {
          "add_account_to_whitelist": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_account_from_whitelist"
        ],
        "properties": {
          "remove_account_from_whitelist": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "activate_at"
            ],
            "properties": {
              "activate_at": {
                "$ref": "#/definitions/Timestamp"
              },
              "cw721_collection_info": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CollectionInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "known_users_cap": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint128",
                "minimum": 0.0
              },
              "max_deployment_duration": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "max_locked_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint128",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "delete_configs"
        ],
        "properties": {
          "delete_configs": {
            "type": "object",
            "required": [
              "timestamps"
            ],
            "properties": {
              "timestamps": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Timestamp"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pause"
        ],
        "properties": {
          "pause": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_tranche"
        ],
        "properties": {
          "add_tranche": {
            "type": "object",
            "required": [
              "tranche"
            ],
            "properties": {
              "tranche": {
                "$ref": "#/definitions/TrancheInfo"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "edit_tranche"
        ],
        "properties": {
          "edit_tranche": {
            "type": "object",
            "required": [
              "tranche_id"
            ],
            "properties": {
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "tranche_metadata": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "tranche_name": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_icqs_for_validators"
        ],
        "properties": {
          "create_icqs_for_validators": {
            "type": "object",
            "required": [
              "validators"
            ],
            "properties": {
              "validators": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_i_c_q_manager"
        ],
        "properties": {
          "add_i_c_q_manager": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_i_c_q_manager"
        ],
        "properties": {
          "remove_i_c_q_manager": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw_i_c_q_funds"
        ],
        "properties": {
          "withdraw_i_c_q_funds": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_liquidity_deployment"
        ],
        "properties": {
          "add_liquidity_deployment": {
            "type": "object",
            "required": [
              "deployed_funds",
              "destinations",
              "funds_before_deployment",
              "proposal_id",
              "remaining_rounds",
              "round_id",
              "total_rounds",
              "tranche_id"
            ],
            "properties": {
              "deployed_funds": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "destinations": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "funds_before_deployment": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "proposal_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "remaining_rounds": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "total_rounds": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_liquidity_deployment"
        ],
        "properties": {
          "remove_liquidity_deployment": {
            "type": "object",
            "required": [
              "proposal_id",
              "round_id",
              "tranche_id"
            ],
            "properties": {
              "proposal_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_token_group_ratio"
        ],
        "properties": {
          "update_token_group_ratio": {
            "type": "object",
            "required": [
              "new_ratio",
              "old_ratio",
              "token_group_id"
            ],
            "properties": {
              "new_ratio": {
                "$ref": "#/definitions/Decimal"
              },
              "old_ratio": {
                "$ref": "#/definitions/Decimal"
              },
              "token_group_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_token_info_provider"
        ],
        "properties": {
          "add_token_info_provider": {
            "type": "object",
            "required": [
              "token_info_provider"
            ],
            "properties": {
              "token_info_provider": {
                "$ref": "#/definitions/TokenInfoProviderInstantiateMsg"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_token_info_provider"
        ],
        "properties": {
          "remove_token_info_provider": {
            "type": "object",
            "required": [
              "provider_id"
            ],
            "properties": {
              "provider_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_gatekeeper"
        ],
        "properties": {
          "set_gatekeeper": {
            "type": "object",
            "properties": {
              "gatekeeper_addr": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Transfer is a base message to move a lockup to another account without triggering actions",
        "type": "object",
        "required": [
          "transfer_nft"
        ],
        "properties": {
          "transfer_nft": {
            "type": "object",
            "required": [
              "recipient",
              "token_id"
            ],
            "properties": {
              "recipient": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This transfers ownership of the token to contract account. contract must be an address controlled by a smart contract, which implements the CW721Receiver interface. The msg will be passed to the recipient contract, along with the token_id.",
        "type": "object",
        "required": [
          "send_nft"
        ],
        "properties": {
          "send_nft": {
            "type": "object",
            "required": [
              "contract",
              "msg",
              "token_id"
            ],
            "properties": {
              "contract": {
                "type": "string"
              },
              "msg": {
                "$ref": "#/definitions/Binary"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows spender to transfer / send the lockup from the owner's account. If expiration is set, then this allowance has a time/height limit",
        "type": "object",
        "required": [
          "approve"
        ],
        "properties": {
          "approve": {
            "type": "object",
            "required": [
              "spender",
              "token_id"
            ],
            "properties": {
              "expires": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expiration"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "spender": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove previously granted Approval",
        "type": "object",
        "required": [
          "revoke"
        ],
        "properties": {
          "revoke": {
            "type": "object",
            "required": [
              "spender",
              "token_id"
            ],
            "properties": {
              "spender": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows operator to transfer / send any token from the owner's account. If expiration is set, then this allowance has a time/height limit",
        "type": "object",
        "required": [
          "approve_all"
        ],
        "properties": {
          "approve_all": {
            "type": "object",
            "required": [
              "operator"
            ],
            "properties": {
              "expires": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expiration"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "operator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove previously granted ApproveAll permission",
        "type": "object",
        "required": [
          "revoke_all"
        ],
        "properties": {
          "revoke_all": {
            "type": "object",
            "required": [
              "operator"
            ],
            "properties": {
              "operator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows whitelisted admin to set the drop token info for lockup conversions.",
        "type": "object",
        "required": [
          "set_drop_token_info"
        ],
        "properties": {
          "set_drop_token_info": {
            "type": "object",
            "required": [
              "core_address",
              "d_token_denom",
              "puppeteer_address"
            ],
            "properties": {
              "core_address": {
                "type": "string"
              },
              "d_token_denom": {
                "type": "string"
              },
              "puppeteer_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows users to convert their lockups to dTokens. This action is only available if the drop token info is set.",
        "type": "object",
        "required": [
          "convert_lockup_to_dtoken"
        ],
        "properties": {
          "convert_lockup_to_dtoken": {
            "type": "object",
            "required": [
              "lock_ids"
            ],
            "properties": {
              "lock_ids": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CollectionInfo": {
        "type": "object",
        "required": [
          "name",
          "symbol"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LockTokensProof": {
        "description": "For detailed explanation of the fields take a look at ExecuteLockTokensMsg located in the interface package",
        "type": "object",
        "required": [
          "maximum_amount",
          "proof"
        ],
        "properties": {
          "maximum_amount": {
            "$ref": "#/definitions/Uint128"
          },
          "proof": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sig_info": {
            "anyOf": [
              {
                "$ref": "#/definitions/SignatureInfo"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ProposalToLockups": {
        "type": "object",
        "required": [
          "lock_ids",
          "proposal_id"
        ],
        "properties": {
          "lock_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "proposal_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "SignatureInfo": {
        "type": "object",
        "required": [
          "claim_msg",
          "signature"
        ],
        "properties": {
          "claim_msg": {
            "$ref": "#/definitions/Binary"
          },
          "signature": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "TokenInfoProviderInstantiateMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "lsm"
            ],
            "properties": {
              "lsm": {
                "type": "object",
                "required": [
                  "hub_connection_id",
                  "hub_transfer_channel_id",
                  "icq_update_period",
                  "max_validator_shares_participating"
                ],
                "properties": {
                  "hub_connection_id": {
                    "type": "string"
                  },
                  "hub_transfer_channel_id": {
                    "type": "string"
                  },
                  "icq_update_period": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "max_validator_shares_participating": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "token_info_provider_contract"
            ],
            "properties": {
              "token_info_provider_contract": {
                "type": "object",
                "required": [
                  "code_id",
                  "label",
                  "msg"
                ],
                "properties": {
                  "admin": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "label": {
                    "type": "string"
                  },
                  "msg": {
                    "$ref": "#/definitions/Binary"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TrancheInfo": {
        "type": "object",
        "required": [
          "metadata",
          "name"
        ],
        "properties": {
          "metadata": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "constants"
        ],
        "properties": {
          "constants": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "token_info_providers"
        ],
        "properties": {
          "token_info_providers": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "gatekeeper"
        ],
        "properties": {
          "gatekeeper": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "tranches"
        ],
        "properties": {
          "tranches": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "all_user_lockups"
        ],
        "properties": {
          "all_user_lockups": {
            "type": "object",
            "required": [
              "address",
              "limit",
              "start_from"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "limit": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "start_from": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "specific_user_lockups"
        ],
        "properties": {
          "specific_user_lockups": {
            "type": "object",
            "required": [
              "address",
              "lock_ids"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "lock_ids": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "all_user_lockups_with_tranche_infos"
        ],
        "properties": {
          "all_user_lockups_with_tranche_infos": {
            "type": "object",
            "required": [
              "address",
              "limit",
              "start_from"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "limit": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "start_from": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "specific_user_lockups_with_tranche_infos"
        ],
        "properties": {
          "specific_user_lockups_with_tranche_infos": {
            "type": "object",
            "required": [
              "address",
              "lock_ids"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "lock_ids": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "expired_user_lockups"
        ],
        "properties": {
          "expired_user_lockups": {
            "type": "object",
            "required": [
              "address",
              "limit",
              "start_from"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "limit": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "start_from": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "user_voting_power"
        ],
        "properties": {
          "user_voting_power": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "user_votes"
        ],
        "properties": {
          "user_votes": {
            "type": "object",
            "required": [
              "address",
              "round_id",
              "tranche_id"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "user_voted_locks"
        ],
        "properties": {
          "user_voted_locks": {
            "type": "object",
            "required": [
              "round_id",
              "tranche_id",
              "user_address"
            ],
            "properties": {
              "proposal_id": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "user_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "lock_votes_history"
        ],
        "properties": {
          "lock_votes_history": {
            "type": "object",
            "required": [
              "lock_id"
            ],
            "properties": {
              "lock_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "start_from_round_id": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "stop_at_round_id": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "tranche_id": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "all_votes"
        ],
        "properties": {
          "all_votes": {
            "type": "object",
            "required": [
              "limit",
              "start_from"
            ],
            "properties": {
              "limit": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "start_from": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "all_votes_round_tranche"
        ],
        "properties": {
          "all_votes_round_tranche": {
            "type": "object",
            "required": [
              "limit",
              "round_id",
              "start_from",
              "tranche_id"
            ],
            "properties": {
              "limit": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "start_from": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "current_round"
        ],
        "properties": {
          "current_round": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "round_end"
        ],
        "properties": {
          "round_end": {
            "type": "object",
            "required": [
              "round_id"
            ],
            "properties": {
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "round_total_voting_power"
        ],
        "properties": {
          "round_total_voting_power": {
            "type": "object",
            "required": [
              "round_id"
            ],
            "properties": {
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "round_proposals"
        ],
        "properties": {
          "round_proposals": {
            "type": "object",
            "required": [
              "limit",
              "round_id",
              "start_from",
              "tranche_id"
            ],
            "properties": {
              "limit": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "start_from": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "proposal"
        ],
        "properties": {
          "proposal": {
            "type": "object",
            "required": [
              "proposal_id",
              "round_id",
              "tranche_id"
            ],
            "properties": {
              "proposal_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "top_n_proposals"
        ],
        "properties": {
          "top_n_proposals": {
            "type": "object",
            "required": [
              "number_of_proposals",
              "round_id",
              "tranche_id"
            ],
            "properties": {
              "number_of_proposals": {
                "type": "integer",
                "format": "uint",
                "minimum": 0.0
              },
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "whitelist"
        ],
        "properties": {
          "whitelist": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "whitelist_admins"
        ],
        "properties": {
          "whitelist_admins": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "i_c_q_managers"
        ],
        "properties": {
          "i_c_q_managers": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "total_locked_tokens"
        ],
        "properties": {
          "total_locked_tokens": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "registered_validator_queries"
        ],
        "properties": {
          "registered_validator_queries": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "can_lock_denom"
        ],
        "properties": {
          "can_lock_denom": {
            "type": "object",
            "required": [
              "token_denom"
            ],
            "properties": {
              "token_denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "liquidity_deployment"
        ],
        "properties": {
          "liquidity_deployment": {
            "type": "object",
            "required": [
              "proposal_id",
              "round_id",
              "tranche_id"
            ],
            "properties": {
              "proposal_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "round_tranche_liquidity_deployments"
        ],
        "properties": {
          "round_tranche_liquidity_deployments": {
            "type": "object",
            "required": [
              "limit",
              "round_id",
              "start_from",
              "tranche_id"
            ],
            "properties": {
              "limit": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "start_from": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "tranche_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "total_power_at_height"
        ],
        "properties": {
          "total_power_at_height": {
            "type": "object",
            "properties": {
              "height": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "voting_power_at_height"
        ],
        "properties": {
          "voting_power_at_height": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "height": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the owner of the given token, as well as anyone with approval on this particular token. If the token is unknown, returns an error. If include_expired is set (to true), shows expired approvals in the results, otherwise, ignore them.",
        "type": "object",
        "required": [
          "owner_of"
        ],
        "properties": {
          "owner_of": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "include_expired": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns an approval of spender about the given token_id. If include_expired is set (to true), shows expired approvals in the results, otherwise, ignore them.",
        "type": "object",
        "required": [
          "approval"
        ],
        "properties": {
          "approval": {
            "type": "object",
            "required": [
              "spender",
              "token_id"
            ],
            "properties": {
              "include_expired": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "spender": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Return all approvals that apply on the given token_id. If include_expired is set (to true), show expired approvals in the results, otherwise, ignore them.",
        "type": "object",
        "required": [
          "approvals"
        ],
        "properties": {
          "approvals": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "include_expired": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "List operators that can access all of the owner's tokens.",
        "type": "object",
        "required": [
          "all_operators"
        ],
        "properties": {
          "all_operators": {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "include_expired": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "owner": {
                "type": "string"
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Total number of tokens (lockups) issued so far",
        "type": "object",
        "required": [
          "num_tokens"
        ],
        "properties": {
          "num_tokens": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "collection_info"
        ],
        "properties": {
          "collection_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns metadata about one particular token (as LockupWithPerTrancheInfo).",
        "type": "object",
        "required": [
          "nft_info"
        ],
        "properties": {
          "nft_info": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the result of both `NftInfo` and `OwnerOf` as one query as an optimization for clients If include_expired is set (to true), shows expired approvals in the results, otherwise, ignore them.",
        "type": "object",
        "required": [
          "all_nft_info"
        ],
        "properties": {
          "all_nft_info": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "include_expired": {
                "description": "unset or false will filter out expired approvals, you must set to true to see them",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Lists token_ids owned by a given owner, [] if no tokens.",
        "type": "object",
        "required": [
          "tokens"
        ],
        "properties": {
          "tokens": {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "owner": {
                "type": "string"
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Lists token_ids controlled by the contract.",
        "type": "object",
        "required": [
          "all_tokens"
        ],
        "properties": {
          "all_tokens": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Lists token_ids controlled by the contract.",
        "type": "object",
        "required": [
          "simulate_dtoken_amounts"
        ],
        "properties": {
          "simulate_dtoken_amounts": {
            "type": "object",
            "required": [
              "address",
              "lock_ids"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "lock_ids": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_nft_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllNftInfoResponse",
      "type": "object",
      "required": [
        "access",
        "info"
      ],
      "properties": {
        "access": {
          "description": "Who can transfer the token",
          "allOf": [
            {
              "$ref": "#/definitions/OwnerOfResponse"
            }
          ]
        },
        "info": {
          "description": "Data on the token itself,",
          "allOf": [
            {
              "$ref": "#/definitions/NftInfoResponse"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "$ref": "#/definitions/Expiration"
            },
            "spender": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "LockEntryV2": {
          "type": "object",
          "required": [
            "funds",
            "lock_end",
            "lock_id",
            "lock_start",
            "owner"
          ],
          "properties": {
            "funds": {
              "$ref": "#/definitions/Coin"
            },
            "lock_end": {
              "$ref": "#/definitions/Timestamp"
            },
            "lock_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lock_start": {
              "$ref": "#/definitions/Timestamp"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "LockEntryWithPower": {
          "type": "object",
          "required": [
            "current_voting_power",
            "lock_entry"
          ],
          "properties": {
            "current_voting_power": {
              "$ref": "#/definitions/Uint128"
            },
            "lock_entry": {
              "$ref": "#/definitions/LockEntryV2"
            }
          },
          "additionalProperties": false
        },
        "LockupWithPerTrancheInfo": {
          "type": "object",
          "required": [
            "lock_with_power",
            "per_tranche_info"
          ],
          "properties": {
            "lock_with_power": {
              "$ref": "#/definitions/LockEntryWithPower"
            },
            "per_tranche_info": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerTrancheLockupInfo"
              }
            }
          },
          "additionalProperties": false
        },
        "NftInfoResponse": {
          "type": "object",
          "required": [
            "extension"
          ],
          "properties": {
            "extension": {
              "description": "You can add any custom metadata here when you extend cw721-base",
              "allOf": [
                {
                  "$ref": "#/definitions/LockupWithPerTrancheInfo"
                }
              ]
            },
            "token_uri": {
              "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "OwnerOfResponse": {
          "type": "object",
          "required": [
            "approvals",
            "owner"
          ],
          "properties": {
            "approvals": {
              "description": "If set this address is approved to transfer/send the token as well",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            },
            "owner": {
              "description": "Owner of the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "PerTrancheLockupInfo": {
          "type": "object",
          "required": [
            "historic_voted_on_proposals",
            "next_round_lockup_can_vote",
            "tranche_id"
          ],
          "properties": {
            "current_voted_on_proposal": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "historic_voted_on_proposals": {
              "description": "This is the list of proposals that the lockup has been used to vote for in the past. It is used to show the history of the lockup upon transfer / selling on Marketplace. Note that this does not include the current voted on proposal, which is found in the current_voted_on_proposal field.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoundWithBid"
              }
            },
            "next_round_lockup_can_vote": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "tied_to_proposal": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "RoundWithBid": {
          "type": "object",
          "required": [
            "proposal_id",
            "round_end",
            "round_id"
          ],
          "properties": {
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_end": {
              "$ref": "#/definitions/Timestamp"
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_operators": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OperatorsResponse",
      "type": "object",
      "required": [
        "operators"
      ],
      "properties": {
        "operators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "$ref": "#/definitions/Expiration"
            },
            "spender": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokensResponse",
      "type": "object",
      "required": [
        "tokens"
      ],
      "properties": {
        "tokens": {
          "description": "Contains all token_ids in lexicographical ordering If there are more than `limit`, use `start_after` in future queries to achieve pagination.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "all_user_lockups": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllUserLockupsResponse",
      "type": "object",
      "required": [
        "lockups"
      ],
      "properties": {
        "lockups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LockEntryWithPower"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "LockEntryV2": {
          "type": "object",
          "required": [
            "funds",
            "lock_end",
            "lock_id",
            "lock_start",
            "owner"
          ],
          "properties": {
            "funds": {
              "$ref": "#/definitions/Coin"
            },
            "lock_end": {
              "$ref": "#/definitions/Timestamp"
            },
            "lock_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lock_start": {
              "$ref": "#/definitions/Timestamp"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "LockEntryWithPower": {
          "type": "object",
          "required": [
            "current_voting_power",
            "lock_entry"
          ],
          "properties": {
            "current_voting_power": {
              "$ref": "#/definitions/Uint128"
            },
            "lock_entry": {
              "$ref": "#/definitions/LockEntryV2"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_user_lockups_with_tranche_infos": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllUserLockupsWithTrancheInfosResponse",
      "type": "object",
      "required": [
        "lockups_with_per_tranche_infos"
      ],
      "properties": {
        "lockups_with_per_tranche_infos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LockupWithPerTrancheInfo"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "LockEntryV2": {
          "type": "object",
          "required": [
            "funds",
            "lock_end",
            "lock_id",
            "lock_start",
            "owner"
          ],
          "properties": {
            "funds": {
              "$ref": "#/definitions/Coin"
            },
            "lock_end": {
              "$ref": "#/definitions/Timestamp"
            },
            "lock_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lock_start": {
              "$ref": "#/definitions/Timestamp"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "LockEntryWithPower": {
          "type": "object",
          "required": [
            "current_voting_power",
            "lock_entry"
          ],
          "properties": {
            "current_voting_power": {
              "$ref": "#/definitions/Uint128"
            },
            "lock_entry": {
              "$ref": "#/definitions/LockEntryV2"
            }
          },
          "additionalProperties": false
        },
        "LockupWithPerTrancheInfo": {
          "type": "object",
          "required": [
            "lock_with_power",
            "per_tranche_info"
          ],
          "properties": {
            "lock_with_power": {
              "$ref": "#/definitions/LockEntryWithPower"
            },
            "per_tranche_info": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerTrancheLockupInfo"
              }
            }
          },
          "additionalProperties": false
        },
        "PerTrancheLockupInfo": {
          "type": "object",
          "required": [
            "historic_voted_on_proposals",
            "next_round_lockup_can_vote",
            "tranche_id"
          ],
          "properties": {
            "current_voted_on_proposal": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "historic_voted_on_proposals": {
              "description": "This is the list of proposals that the lockup has been used to vote for in the past. It is used to show the history of the lockup upon transfer / selling on Marketplace. Note that this does not include the current voted on proposal, which is found in the current_voted_on_proposal field.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoundWithBid"
              }
            },
            "next_round_lockup_can_vote": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "tied_to_proposal": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "RoundWithBid": {
          "type": "object",
          "required": [
            "proposal_id",
            "round_end",
            "round_id"
          ],
          "properties": {
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_end": {
              "$ref": "#/definitions/Timestamp"
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_votes": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllVotesResponse",
      "type": "object",
      "required": [
        "votes"
      ],
      "properties": {
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VoteEntry"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Vote": {
          "type": "object",
          "required": [
            "prop_id",
            "time_weighted_shares"
          ],
          "properties": {
            "prop_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "time_weighted_shares": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/Decimal"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        "VoteEntry": {
          "type": "object",
          "required": [
            "lock_id",
            "round_id",
            "sender_addr",
            "tranche_id",
            "vote"
          ],
          "properties": {
            "lock_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "sender_addr": {
              "$ref": "#/definitions/Addr"
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "vote": {
              "$ref": "#/definitions/Vote"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "all_votes_round_tranche": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllVotesRoundTrancheResponse",
      "type": "object",
      "required": [
        "votes"
      ],
      "properties": {
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VoteEntry"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Vote": {
          "type": "object",
          "required": [
            "prop_id",
            "time_weighted_shares"
          ],
          "properties": {
            "prop_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "time_weighted_shares": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/Decimal"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        "VoteEntry": {
          "type": "object",
          "required": [
            "lock_id",
            "round_id",
            "sender_addr",
            "tranche_id",
            "vote"
          ],
          "properties": {
            "lock_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "sender_addr": {
              "$ref": "#/definitions/Addr"
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "vote": {
              "$ref": "#/definitions/Vote"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "approval": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ApprovalResponse",
      "type": "object",
      "required": [
        "approval"
      ],
      "properties": {
        "approval": {
          "$ref": "#/definitions/Approval"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "$ref": "#/definitions/Expiration"
            },
            "spender": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "approvals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ApprovalsResponse",
      "type": "object",
      "required": [
        "approvals"
      ],
      "properties": {
        "approvals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "$ref": "#/definitions/Expiration"
            },
            "spender": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "can_lock_denom": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CanLockDenomResponse",
      "type": "object",
      "required": [
        "can_be_locked",
        "denom"
      ],
      "properties": {
        "can_be_locked": {
          "type": "boolean"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "collection_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CollectionInfo",
      "type": "object",
      "required": [
        "name",
        "symbol"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "constants": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConstantsResponse",
      "type": "object",
      "required": [
        "constants"
      ],
      "properties": {
        "constants": {
          "$ref": "#/definitions/Constants"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "CollectionInfo": {
          "type": "object",
          "required": [
            "name",
            "symbol"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "symbol": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Constants": {
          "type": "object",
          "required": [
            "cw721_collection_info",
            "first_round_start",
            "known_users_cap",
            "lock_epoch_length",
            "max_deployment_duration",
            "max_locked_tokens",
            "paused",
            "round_length",
            "round_lock_power_schedule"
          ],
          "properties": {
            "cw721_collection_info": {
              "$ref": "#/definitions/CollectionInfo"
            },
            "first_round_start": {
              "$ref": "#/definitions/Timestamp"
            },
            "known_users_cap": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "lock_epoch_length": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "max_deployment_duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "max_locked_tokens": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "paused": {
              "type": "boolean"
            },
            "round_length": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_lock_power_schedule": {
              "$ref": "#/definitions/RoundLockPowerSchedule"
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "LockPowerEntry": {
          "type": "object",
          "required": [
            "locked_rounds",
            "power_scaling_factor"
          ],
          "properties": {
            "locked_rounds": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "power_scaling_factor": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        "RoundLockPowerSchedule": {
          "type": "object",
          "required": [
            "round_lock_power_schedule"
          ],
          "properties": {
            "round_lock_power_schedule": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LockPowerEntry"
              }
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "current_round": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CurrentRoundResponse",
      "type": "object",
      "required": [
        "round_end",
        "round_id"
      ],
      "properties": {
        "round_end": {
          "$ref": "#/definitions/Timestamp"
        },
        "round_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "expired_user_lockups": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ExpiredUserLockupsResponse",
      "type": "object",
      "required": [
        "lockups"
      ],
      "properties": {
        "lockups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LockEntryV2"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "LockEntryV2": {
          "type": "object",
          "required": [
            "funds",
            "lock_end",
            "lock_id",
            "lock_start",
            "owner"
          ],
          "properties": {
            "funds": {
              "$ref": "#/definitions/Coin"
            },
            "lock_end": {
              "$ref": "#/definitions/Timestamp"
            },
            "lock_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lock_start": {
              "$ref": "#/definitions/Timestamp"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "gatekeeper": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GatekeeperResponse",
      "type": "object",
      "required": [
        "gatekeeper"
      ],
      "properties": {
        "gatekeeper": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "i_c_q_managers": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ICQManagersResponse",
      "type": "object",
      "required": [
        "managers"
      ],
      "properties": {
        "managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Addr"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "liquidity_deployment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LiquidityDeploymentResponse",
      "type": "object",
      "required": [
        "liquidity_deployment"
      ],
      "properties": {
        "liquidity_deployment": {
          "$ref": "#/definitions/LiquidityDeployment"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "LiquidityDeployment": {
          "type": "object",
          "required": [
            "deployed_funds",
            "destinations",
            "funds_before_deployment",
            "proposal_id",
            "remaining_rounds",
            "round_id",
            "total_rounds",
            "tranche_id"
          ],
          "properties": {
            "deployed_funds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "destinations": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "funds_before_deployment": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "remaining_rounds": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "total_rounds": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "lock_votes_history": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LockVotesHistoryResponse",
      "type": "object",
      "required": [
        "vote_history"
      ],
      "properties": {
        "vote_history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LockVotesHistoryEntry"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "LockVotesHistoryEntry": {
          "type": "object",
          "required": [
            "proposal_id",
            "round_id",
            "tranche_id",
            "vote_power"
          ],
          "properties": {
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "vote_power": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "nft_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NftInfoResponse",
      "type": "object",
      "required": [
        "extension"
      ],
      "properties": {
        "extension": {
          "description": "You can add any custom metadata here when you extend cw721-base",
          "allOf": [
            {
              "$ref": "#/definitions/LockupWithPerTrancheInfo"
            }
          ]
        },
        "token_uri": {
          "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "LockEntryV2": {
          "type": "object",
          "required": [
            "funds",
            "lock_end",
            "lock_id",
            "lock_start",
            "owner"
          ],
          "properties": {
            "funds": {
              "$ref": "#/definitions/Coin"
            },
            "lock_end": {
              "$ref": "#/definitions/Timestamp"
            },
            "lock_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lock_start": {
              "$ref": "#/definitions/Timestamp"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "LockEntryWithPower": {
          "type": "object",
          "required": [
            "current_voting_power",
            "lock_entry"
          ],
          "properties": {
            "current_voting_power": {
              "$ref": "#/definitions/Uint128"
            },
            "lock_entry": {
              "$ref": "#/definitions/LockEntryV2"
            }
          },
          "additionalProperties": false
        },
        "LockupWithPerTrancheInfo": {
          "type": "object",
          "required": [
            "lock_with_power",
            "per_tranche_info"
          ],
          "properties": {
            "lock_with_power": {
              "$ref": "#/definitions/LockEntryWithPower"
            },
            "per_tranche_info": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerTrancheLockupInfo"
              }
            }
          },
          "additionalProperties": false
        },
        "PerTrancheLockupInfo": {
          "type": "object",
          "required": [
            "historic_voted_on_proposals",
            "next_round_lockup_can_vote",
            "tranche_id"
          ],
          "properties": {
            "current_voted_on_proposal": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "historic_voted_on_proposals": {
              "description": "This is the list of proposals that the lockup has been used to vote for in the past. It is used to show the history of the lockup upon transfer / selling on Marketplace. Note that this does not include the current voted on proposal, which is found in the current_voted_on_proposal field.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoundWithBid"
              }
            },
            "next_round_lockup_can_vote": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "tied_to_proposal": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "RoundWithBid": {
          "type": "object",
          "required": [
            "proposal_id",
            "round_end",
            "round_id"
          ],
          "properties": {
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_end": {
              "$ref": "#/definitions/Timestamp"
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "num_tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NumTokensResponse",
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "owner_of": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OwnerOfResponse",
      "type": "object",
      "required": [
        "approvals",
        "owner"
      ],
      "properties": {
        "approvals": {
          "description": "If set this address is approved to transfer/send the token as well",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          }
        },
        "owner": {
          "description": "Owner of the token",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "$ref": "#/definitions/Expiration"
            },
            "spender": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "proposal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProposalResponse",
      "type": "object",
      "required": [
        "proposal"
      ],
      "properties": {
        "proposal": {
          "$ref": "#/definitions/Proposal"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Proposal": {
          "type": "object",
          "required": [
            "deployment_duration",
            "description",
            "minimum_atom_liquidity_request",
            "percentage",
            "power",
            "proposal_id",
            "round_id",
            "title",
            "tranche_id"
          ],
          "properties": {
            "deployment_duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "description": {
              "type": "string"
            },
            "minimum_atom_liquidity_request": {
              "$ref": "#/definitions/Uint128"
            },
            "percentage": {
              "$ref": "#/definitions/Uint128"
            },
            "power": {
              "$ref": "#/definitions/Uint128"
            },
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "title": {
              "type": "string"
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "registered_validator_queries": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RegisteredValidatorQueriesResponse",
      "type": "object",
      "required": [
        "query_ids"
      ],
      "properties": {
        "query_ids": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false
    },
    "round_end": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RoundEndResponse",
      "type": "object",
      "required": [
        "round_end"
      ],
      "properties": {
        "round_end": {
          "$ref": "#/definitions/Timestamp"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "round_proposals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RoundProposalsResponse",
      "type": "object",
      "required": [
        "proposals"
      ],
      "properties": {
        "proposals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Proposal"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Proposal": {
          "type": "object",
          "required": [
            "deployment_duration",
            "description",
            "minimum_atom_liquidity_request",
            "percentage",
            "power",
            "proposal_id",
            "round_id",
            "title",
            "tranche_id"
          ],
          "properties": {
            "deployment_duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "description": {
              "type": "string"
            },
            "minimum_atom_liquidity_request": {
              "$ref": "#/definitions/Uint128"
            },
            "percentage": {
              "$ref": "#/definitions/Uint128"
            },
            "power": {
              "$ref": "#/definitions/Uint128"
            },
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "title": {
              "type": "string"
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "round_total_voting_power": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RoundTotalVotingPowerResponse",
      "type": "object",
      "required": [
        "total_voting_power"
      ],
      "properties": {
        "total_voting_power": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "round_tranche_liquidity_deployments": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RoundTrancheLiquidityDeploymentsResponse",
      "type": "object",
      "required": [
        "liquidity_deployments"
      ],
      "properties": {
        "liquidity_deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiquidityDeployment"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "LiquidityDeployment": {
          "type": "object",
          "required": [
            "deployed_funds",
            "destinations",
            "funds_before_deployment",
            "proposal_id",
            "remaining_rounds",
            "round_id",
            "total_rounds",
            "tranche_id"
          ],
          "properties": {
            "deployed_funds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "destinations": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "funds_before_deployment": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "remaining_rounds": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "total_rounds": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "simulate_dtoken_amounts": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DtokenAmountsResponse",
      "type": "object",
      "required": [
        "dtokens_response"
      ],
      "properties": {
        "dtokens_response": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DtokenAmountResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "DtokenAmountResponse": {
          "type": "object",
          "required": [
            "dtoken_amount",
            "lock_id"
          ],
          "properties": {
            "dtoken_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "lock_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "specific_user_lockups": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SpecificUserLockupsResponse",
      "type": "object",
      "required": [
        "lockups"
      ],
      "properties": {
        "lockups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LockEntryWithPower"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "LockEntryV2": {
          "type": "object",
          "required": [
            "funds",
            "lock_end",
            "lock_id",
            "lock_start",
            "owner"
          ],
          "properties": {
            "funds": {
              "$ref": "#/definitions/Coin"
            },
            "lock_end": {
              "$ref": "#/definitions/Timestamp"
            },
            "lock_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lock_start": {
              "$ref": "#/definitions/Timestamp"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "LockEntryWithPower": {
          "type": "object",
          "required": [
            "current_voting_power",
            "lock_entry"
          ],
          "properties": {
            "current_voting_power": {
              "$ref": "#/definitions/Uint128"
            },
            "lock_entry": {
              "$ref": "#/definitions/LockEntryV2"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "specific_user_lockups_with_tranche_infos": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SpecificUserLockupsWithTrancheInfosResponse",
      "type": "object",
      "required": [
        "lockups_with_per_tranche_infos"
      ],
      "properties": {
        "lockups_with_per_tranche_infos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LockupWithPerTrancheInfo"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "LockEntryV2": {
          "type": "object",
          "required": [
            "funds",
            "lock_end",
            "lock_id",
            "lock_start",
            "owner"
          ],
          "properties": {
            "funds": {
              "$ref": "#/definitions/Coin"
            },
            "lock_end": {
              "$ref": "#/definitions/Timestamp"
            },
            "lock_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lock_start": {
              "$ref": "#/definitions/Timestamp"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "LockEntryWithPower": {
          "type": "object",
          "required": [
            "current_voting_power",
            "lock_entry"
          ],
          "properties": {
            "current_voting_power": {
              "$ref": "#/definitions/Uint128"
            },
            "lock_entry": {
              "$ref": "#/definitions/LockEntryV2"
            }
          },
          "additionalProperties": false
        },
        "LockupWithPerTrancheInfo": {
          "type": "object",
          "required": [
            "lock_with_power",
            "per_tranche_info"
          ],
          "properties": {
            "lock_with_power": {
              "$ref": "#/definitions/LockEntryWithPower"
            },
            "per_tranche_info": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerTrancheLockupInfo"
              }
            }
          },
          "additionalProperties": false
        },
        "PerTrancheLockupInfo": {
          "type": "object",
          "required": [
            "historic_voted_on_proposals",
            "next_round_lockup_can_vote",
            "tranche_id"
          ],
          "properties": {
            "current_voted_on_proposal": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "historic_voted_on_proposals": {
              "description": "This is the list of proposals that the lockup has been used to vote for in the past. It is used to show the history of the lockup upon transfer / selling on Marketplace. Note that this does not include the current voted on proposal, which is found in the current_voted_on_proposal field.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoundWithBid"
              }
            },
            "next_round_lockup_can_vote": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "tied_to_proposal": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "RoundWithBid": {
          "type": "object",
          "required": [
            "proposal_id",
            "round_end",
            "round_id"
          ],
          "properties": {
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_end": {
              "$ref": "#/definitions/Timestamp"
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "token_info_providers": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokenInfoProvidersResponse",
      "type": "object",
      "required": [
        "providers"
      ],
      "properties": {
        "providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenInfoProvider"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "DenomInfoResponse": {
          "type": "object",
          "required": [
            "denom",
            "ratio",
            "token_group_id"
          ],
          "properties": {
            "denom": {
              "type": "string"
            },
            "ratio": {
              "$ref": "#/definitions/Decimal"
            },
            "token_group_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "TokenInfoProvider": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "lsm"
              ],
              "properties": {
                "lsm": {
                  "$ref": "#/definitions/TokenInfoProviderLSM"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "derivative"
              ],
              "properties": {
                "derivative": {
                  "$ref": "#/definitions/TokenInfoProviderDerivative"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "TokenInfoProviderDerivative": {
          "type": "object",
          "required": [
            "cache",
            "contract"
          ],
          "properties": {
            "cache": {
              "type": "object",
              "additionalProperties": false
            },
            "contract": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "TokenInfoProviderLSM": {
          "type": "object",
          "required": [
            "hub_connection_id",
            "hub_transfer_channel_id",
            "icq_update_period",
            "max_validator_shares_participating"
          ],
          "properties": {
            "hub_connection_id": {
              "type": "string"
            },
            "hub_transfer_channel_id": {
              "type": "string"
            },
            "icq_update_period": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "max_validator_shares_participating": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokensResponse",
      "type": "object",
      "required": [
        "tokens"
      ],
      "properties": {
        "tokens": {
          "description": "Contains all token_ids in lexicographical ordering If there are more than `limit`, use `start_after` in future queries to achieve pagination.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "top_n_proposals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TopNProposalsResponse",
      "type": "object",
      "required": [
        "proposals"
      ],
      "properties": {
        "proposals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Proposal"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Proposal": {
          "type": "object",
          "required": [
            "deployment_duration",
            "description",
            "minimum_atom_liquidity_request",
            "percentage",
            "power",
            "proposal_id",
            "round_id",
            "title",
            "tranche_id"
          ],
          "properties": {
            "deployment_duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "description": {
              "type": "string"
            },
            "minimum_atom_liquidity_request": {
              "$ref": "#/definitions/Uint128"
            },
            "percentage": {
              "$ref": "#/definitions/Uint128"
            },
            "power": {
              "$ref": "#/definitions/Uint128"
            },
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "title": {
              "type": "string"
            },
            "tranche_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "total_locked_tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TotalLockedTokensResponse",
      "type": "object",
      "required": [
        "total_locked_tokens"
      ],
      "properties": {
        "total_locked_tokens": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "total_power_at_height": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TotalPowerAtHeightResponse",
      "type": "object",
      "required": [
        "height",
        "power"
      ],
      "properties": {
        "height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "power": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "tranches": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TranchesResponse",
      "type": "object",
      "required": [
        "tranches"
      ],
      "properties": {
        "tranches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tranche"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Tranche": {
          "type": "object",
          "required": [
            "id",
            "metadata",
            "name"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "metadata": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "user_voted_locks": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserVotedLocksResponse",
      "type": "object",
      "required": [
        "voted_locks"
      ],
      "properties": {
        "voted_locks": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VotedLockInfo"
                }
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "VotedLockInfo": {
          "type": "object",
          "required": [
            "lock_id",
            "vote_power"
          ],
          "properties": {
            "lock_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "vote_power": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "user_votes": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserVotesResponse",
      "type": "object",
      "required": [
        "votes"
      ],
      "properties": {
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VoteWithPower"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "VoteWithPower": {
          "type": "object",
          "required": [
            "power",
            "prop_id"
          ],
          "properties": {
            "power": {
              "$ref": "#/definitions/Decimal"
            },
            "prop_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "user_voting_power": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserVotingPowerResponse",
      "type": "object",
      "required": [
        "voting_power"
      ],
      "properties": {
        "voting_power": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "voting_power_at_height": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VotingPowerAtHeightResponse",
      "type": "object",
      "required": [
        "height",
        "power"
      ],
      "properties": {
        "height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "power": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "whitelist": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WhitelistResponse",
      "type": "object",
      "required": [
        "whitelist"
      ],
      "properties": {
        "whitelist": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Addr"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "whitelist_admins": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WhitelistAdminsResponse",
      "type": "object",
      "required": [
        "admins"
      ],
      "properties": {
        "admins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Addr"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    }
  }
}
