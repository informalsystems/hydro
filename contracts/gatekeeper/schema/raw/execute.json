{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "register_stage"
      ],
      "properties": {
        "register_stage": {
          "type": "object",
          "required": [
            "activate_at",
            "merkle_root",
            "start_new_epoch"
          ],
          "properties": {
            "activate_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "hrp": {
              "type": [
                "string",
                "null"
              ]
            },
            "merkle_root": {
              "type": "string"
            },
            "start_new_epoch": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "lock_tokens"
      ],
      "properties": {
        "lock_tokens": {
          "$ref": "#/definitions/ExecuteLockTokensMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_admin"
      ],
      "properties": {
        "add_admin": {
          "type": "object",
          "required": [
            "admin"
          ],
          "properties": {
            "admin": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_admin"
      ],
      "properties": {
        "remove_admin": {
          "type": "object",
          "required": [
            "admin"
          ],
          "properties": {
            "admin": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "ExecuteLockTokensMsg": {
      "type": "object",
      "required": [
        "amount_to_lock",
        "maximum_amount",
        "proof",
        "user_address"
      ],
      "properties": {
        "amount_to_lock": {
          "$ref": "#/definitions/Uint128"
        },
        "maximum_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "proof": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sig_info": {
          "anyOf": [
            {
              "$ref": "#/definitions/SignatureInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "user_address": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "SignatureInfo": {
      "type": "object",
      "required": [
        "claim_msg",
        "signature"
      ],
      "properties": {
        "claim_msg": {
          "$ref": "#/definitions/Binary"
        },
        "signature": {
          "$ref": "#/definitions/Binary"
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
